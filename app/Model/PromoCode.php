<?php

namespace App\Model;

use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use DB;

class PromoCode extends Model
{
    protected $table = 'promo_code';

    public $timestamps = false;

    protected $dateFormat = 'U';

    protected $primaryKey = 'code';

    public $incrementing = false;

    public function type_name() {
        switch ($this->type) {
            case 'A':
                return 'Affiliate';
            case 'B':
                return 'Affiliate'; //Affiliate Code generated by Affiliate user
            case 'R':
                return 'Refer a Friend';
            case 'N':
                return 'Normal';
            case 'G':
                return 'Groupon';
            case 'T':
                return 'GILT';
            case 'K':
                return 'Voucher';
            default:
                return $this->type;
        }
    }

    public static function get_type_name($type) {
        switch ($type) {
            case 'A':
                return 'Affiliate';
            case 'B':
                return 'Affiliate';
            case 'R':
                return 'Refer a Friend';
            case 'N':
                return 'Normal';
            case 'G':
                return 'Groupon';
            case 'T':
                return 'GILT';
            case 'K':
                return 'Voucher';
            default:
                return $type;
        }
    }

    public function amt_type_name() {
        switch ($this->amt_type) {
            case 'R':
                return 'Ratio';
            case 'A':
                return 'Amount';
        }
    }

    public function status_name() {
        switch ($this->status) {
            case 'I':
                return '<span class="text-danger">Inactive</span>';
            case 'A':
                return '<span class="text-success">Active</span>';
        }
    }

    public function getRedeemedAttribute() {
        $code = $this->attributes['code'];

        $app = AppointmentList::whereNotIn('status', ['C', 'L']) //where('status', '!=', 'C')
            ->where(DB::raw('promo_code'), strtoupper($code))
            ->first();
        if (!empty($app)) {
            return true;
        }

        $credit = Credit::where('type', 'C')
            ->where('category', 'S')
            ->where('status', 'A')
            ->where('referral_code', $code)
            ->first();
        if (!empty($credit)) {
            return true;
        }

        return false;
    }

    public function redeemed_appointment($type) {
        $code = $this->attributes['code'];
        $redeemed_appointment = '';
        $redeemed_amount = 0;
        $redeemed_date ='';
        $app_id = null;
        if ($this->redeemed) {
            $appt = AppointmentList::where(DB::raw('promo_code'), strtoupper($code))
                ->whereNotIn('status', ['C', 'L'])
                ->orderBy('cdate', 'asc')
                ->get();

            if (!empty($appt)) {
                $seq = 1;
                $total_month = $this->attributes['total_month'];
                $redeemed_appointment = 'Total Qty: ' . count($appt) . '<br>';

                foreach($appt as $a) {

                    $seq_tag = '';
                    if ($total_month > 1) {
                        $seq_tag = '<span style="color:red">(' . $seq . '/' . $total_month . ')</span>';
                    }

                    $redeemed_appointment .= 'Appointment: <a href="appointment/' . $a->appointment_id . '">' . $a->appointment_id . '</a> ' . $seq_tag . '<br>';
                    $redeemed_amount += $a->promo_amt;
                    $redeemed_date = $a->cdate;
                    $app_id = $a->appointment_id;
                    $seq++;
                }
            }

            if ($app_id) {
                $credit = Credit::where('type', 'C')
                    ->where('appointment_id', $app_id)
                    ->get();
            } else {
                $credit = Credit::where('type', 'C')
                    ->where('status', 'A')
                    ->where('referral_code', $code)
                    ->get();
            }

            if (!empty($credit)) {
                foreach ($credit as $o) {
                    $redeemed_appointment .= 'Credit: <b>$' . number_format($o->amt, 2) . '</b> to user: <a href="/admin/user/' . $o->user_id . '">' . $o->user_id . '</a><br/>';
                }
            }
        }

        switch ($type) {
            case 'appointment':
                return $redeemed_appointment;
                break;
            case 'amount':
                return '$'.$redeemed_amount;
                break;
            case 'date' :
                $redeemed_date = Carbon::parse($redeemed_date)->format('m/d/Y h:i A');
                return $redeemed_date;
                break;
            default:
                return $app_id;
                break;
        }


    }

    public function redeemed_credit() {

    }

    public function getGrouponAmtAttribute()
    {
        $groupon_amt = $this->attributes['groupon_amt'];
        $type = $this->attributes['type'];
        $total_month = $this->attributes['total_month'];
        if (empty($total_month)) {
            $total_month = 0;
        }

        if ($type == 'G' && $total_month > 1) {
            return round($groupon_amt / $total_month, 2);
        }

        return $groupon_amt;
    }

    public static function generate_code_for_giftcard($amt, $user_id,$giftcard_id=null) {
        $code = self::generate_code('G', 8);
//N: Normal,
//A: Affiliate,
//B:Affiliate Code generated by affiliate user,
//R: Refer a Friend by user/groomer,
//G: Groupon,
//T:Gilt,
//K: Voucher,
//S:Membership
        $result = self::add_new('K', 'A', 'A', $amt, $code, 'N', '2099-12-31',
            $user_id, 'N', 'N', $giftcard_id );
        if (!$result) return null;

        return $code;
    }

    public static function generate_code_for_subscription($amt, $user_id, $giftcard_id ) {
        $code = self::generate_code('M', 7);

        //Cover Insurance & Tax with the
        $result = self::add_new('S', 'A', 'A', $amt, $code, 'N', Carbon::today()->addDays(365)->format('Y-m-d') ,
                $user_id, 'Y', 'Y', $giftcard_id );
        if (!$result) return null;

        return $code;
    }

    //Shared by both Gift cards and Memberships.
    public static function add_new($type, $status, $amt_type, $amt, $code, $first_only, $expire_date, $created_by,
                                   $include_tax = 'N', $insurance='N', $giftcard_id=0) {
        try {
            $total_month = 1;
            $package_ids = '';
            $note = '';

            if( $giftcard_id == 25) {
                $total_month = 5;
                $package_ids = '1';
                $note = '$500 at 5 Gold with Small Dogs for 1 year';
            }else if( $giftcard_id == 26) {
                $total_month = 5;
                $package_ids = '1';
                $note = '$550 at 5 Gold with Medium Dogs for 1 year';
            }else if( $giftcard_id == 27) {
                $total_month = 5;
                $package_ids = '1';
                $note = '$600 at 5 Gold with Large Dogs for 1 year';
            }else if( $giftcard_id == 28) {
                $total_month = 3;
                $package_ids = '1,2';
                $note = '$250 at 2 Gold and 1 Silver with Dogs for 1 year';
            }else if( $giftcard_id == 29) {
                $total_month = 4;
                $package_ids = '16';
                $note = '$500 at 4 Gold with Cats for 1 year';
            }else if( $giftcard_id == 30) {
                $total_month = 3;
                $package_ids = '16,27';
                $note = '$250 at 2 Gold and 1 Silver with Cats for 1 year';
            }else {  //Gift cards, not Memberships
                $total_month = 1;
                $package_ids = '';
                $note = 'Giftcards' ;
            }

            $promo_code = new PromoCode;
            $promo_code->type       = $type;
            $promo_code->status     = $status;
            $promo_code->amt_type   = $amt_type;
            $promo_code->amt        = $amt;
            if($total_month > 1 ) {
                $promo_code->total_month = $total_month;
            }
            $promo_code->code       = $code;
            $promo_code->cdate      = Carbon::now();
            $promo_code->first_only = empty($first_only) ? 'N' : $first_only;
            $promo_code->expire_date = $expire_date;
            if($package_ids != '' ) {
                $promo_code->package_ids = $package_ids;
                $promo_code->note = $note;
            }
            $promo_code->created_by = $created_by;
            $promo_code->include_tax = $include_tax;
            $promo_code->no_insurance = $insurance;
            $promo_code->save();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }

    public static function generate_code($sign, $length) {

        //$chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@$%&";
        $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $stop = false;

        while (!$stop) {
            $referral_code = $sign;
            for ($i = 0; $i < $length; $i++) {
                $referral_code .= $chars{mt_rand(0, strlen($chars)-1)};
            }

            $rc = PromoCode::whereRaw('code = ?', [strtoupper($referral_code)])->first();
            if (empty($rc)) {
                $stop = true;
            }
        }

        return $referral_code;
    }

    public static function get_owner_name_by_code($referral_code) {

        $promo_code = PromoCode::where('code', $referral_code)->first();

        if(!empty($promo_code->user_id)){
            $user = User::where('user_id', $promo_code->user_id)->first();
            $user->type = 'user';
            return $user;
        }
        if (!empty($promo_code->groomer_id)) {
            $groomer = Groomer::where('groomer_id', $promo_code->groomer_id)->first();
            $groomer->type = 'groomer';
            return $groomer;
        }
        return '';
    }
}
