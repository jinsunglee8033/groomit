<?php
/**
 * Created by PhpStorm.
 * User: yongj
 * Date: 6/15/17
 * Time: 2:33 PM
 */

namespace App\Lib;

use App\Model\Address;
use App\Model\AppointmentProduct;
use App\Model\Product;
use App\Model\PromoCode;
use App\Model\AppointmentList;
use App\Model\Credit;
use App\Model\GiftcardSales;
use App\Model\PromoCodeUsers;
use App\Model\User;
use App\Model\VWAppointmentAddress;
use App\Model\VWAppointmentPhone;
use Carbon\Carbon;
use DB;
use Illuminate\Support\Facades\Auth;

class PromoCodeProcessor
{

    public static function markAsUsed($promo_code, $user_id) {
        try {

            $code = PromoCode::where('code', strtoupper(trim($promo_code)))
                ->first();
            if (empty($code)) {
                return '';
            }

            if (in_array($code->type, ['G', 'K'])) { //Groupon or Gift-card
                $code->status = 'U';
                $code->valid_user_ids = $user_id;
                $code->mdate = Carbon::now();
                $code->modified_by = $user_id;
                if ($code->total_month > 0) {
                    $code->user_id = $user_id;
                }
                $code->save();

                PromoCodeUsers::set_users(strtoupper(trim($promo_code)), [ $user_id ] );

            }else if( $code->type == 'S'){ //Membership code.
               if( empty($code->valid_user_ids) || trim($code->valid_user_ids) == '' ) {
                      //limit users to be able to use it, at the first redemption.
                      // So no more guys are able to use it.
                   $code->valid_user_ids = $user_id;
                   $code->mdate = Carbon::now();
                   $code->modified_by = $user_id;
                   $code->save();

                   PromoCodeUsers::set_users(strtoupper(trim($promo_code)), [ $user_id ] );
               }

            }

            return '';

        } catch (\Exception $ex) {
            return $ex->getMessage() . ' [' . $ex->getCode() . ']';
        }
    }

    public static function recycle($promo_code) {
        try {
            $code = PromoCode::where('code', strtoupper(trim($promo_code)))
                ->first();
            if (empty($code)) {
                return '';
            }

            if (in_array($code->type, ['G', 'K'])) {
                $code->status = 'A';
                $code->update();
            }

            return '';

        } catch (\Exception $ex) {
            return $ex->getMessage() . ' [' . $ex->getCode() . ']';
        }
    }

    //Used counts of appointments.
    public static function getUsedCount($promo_code) {
        $used_cnt = AppointmentList::where('promo_code', strtoupper($promo_code))
            ->whereNotIn('status', ['C', 'L'])
            ->count();

        $used_cnt +=  Credit::where('type', 'C')
            ->where('category', 'S')
            ->where('status', 'A')
            ->where('referral_code', strtoupper($promo_code))
            ->count();

        return $used_cnt;
    }

    public static function getUserId($promo_code) {
        $app = AppointmentList::where('promo_code', strtoupper($promo_code))
            ->whereNotIn('status', ['C', 'L'])
            ->first();
        if (!empty($app)) {
            return $app->user_id;
        }

        $credit = Credit::where('type', 'C')
            ->where('category', 'S')
            ->where('status', 'A')
            ->where('referral_code', strtoupper($promo_code))
            ->first();
        if (!empty($credit)) {
            return $credit->user_id;
        }

        return null;
    }

    public static function checkIfUsed($user_id, PromoCode $code, $appointment_id = null, $prod_ids = null) {
        try {
            // A: Affiliate, B:Affiliate Code generated by affiliate user,
            // N: Normal, R: Refer a Friend by users/groomers,
            // G: Groupon, T:Gilt,
            // K: Voucher,  S:Membership
            $total_month = empty($code->total_month) ? 0 : $code->total_month;   //Exist for G/S only
            $used_cnt = self::getUsedCount($code->code); // redemptions + referal redeemed at Signup.
            $month_left = $total_month - $used_cnt;

            //Check Status
            if ( in_array($code->type ,['G','S'])  && ($code->total_month < 1) )  {
                return 'The code status is not Active[R100].';
            } else if ( $code->status != 'A' ) {
                if( $code->type == 'G'){
                    return 'We are sorry, but we do not accept Groupon Gold Package.[R100].';
                }else {
                    return 'The code status is not Active[R100].';
                }

            }

//            if ( $code->status != 'A' &&
//                ( !in_array($code->type ,['G' ,'S' ] ) || ( in_array($code->type ,['G','S'] )  && ($code->total_month < 1)) ) ) {
//                return 'The code status is not active[R100].';
//            }

            // check exire date
            $expire_date = Carbon::createFromFormat('Y-m-d', $code->expire_date);
            if (Carbon::now()->gt($expire_date)) {
                return 'Promotion code has already been expired[R200].';
            }

            //Check states if exist
            if( !empty($code->states) && (preg_replace('/\s+/','', $code->states) != '') ){
                if( !empty($appointment_id) && ($appointment_id > 0 ) ) {
                    $ret = DB::select("
                    select b.state
                    from appointment_list a, address b 
                    where a.appointment_id  = :appointment_id
                    and a.address_id = b.address_id                    
                ", [
                        'appointment_id' => $appointment_id
                    ]);
                }else {
                    $ret = DB::select("
                    select state
                    from address  
                    where user_id = :user_id
                    and status ='A'
                    order by address_id desc
                ", [
                        'user_id' => $user_id
                    ]);
                    //and default_address ='Y'
                }
                if (count($ret) > 0 ) { //once found. return false once found
                    $exist_limit = stripos( strtoupper(trim($code->states)), $ret[0]->state );
                    if($exist_limit === false ) { //if not found.
                        return 'You can not use the code in your area[R300].';
                    }
                }else {
                    return 'No Address found on the User/Appointment[R301].';
                }
            }

            //Check available valid_user_id
            if( !empty($code->valid_user_ids) && preg_replace('/\s+/','', $code->valid_user_ids) != '' ) {
                $code_user = PromoCodeUsers::where('promo_code', $code->code)->where('user_id', $user_id)->first();
                if (empty($code_user)) {
                    return 'Your code is not available[R400].';
                }
            }

            //Check available package_IDs
            $package_ids = [];
            if (!empty($code->package_ids) && preg_replace('/\s+/','', $code->package_ids) != ''  ) {
                $package_ids = explode(',', $code->package_ids);
            }
            //Check available package_id, Not used any longer.
//            if (!empty($code->package_id)) {
//                if( in_array($code->package_id, $package_ids )) {
//
//                }else {
//                    $package_ids[] = $code->package_id;
//                }
//            }
            if (!empty($package_ids) && count($package_ids) > 0) {
//Do not check if packages in promo_code is valid or not. Just ignore if it's not valid package IDs.
//                $msg_prod_name = '';
//                foreach ($package_ids as $package_id) {
//                    $product = Product::find($package_id);
//                    if (empty($product)) {
//                        return 'Promotion code setup is incomplete[R500]';
//                    }
//
//                    if (!in_array($product->prod_type, ['P'])) {
//                        return 'Promtoion code setup is invalid[R501]';
//                    }
//
//                    $msg_prod_name .= '[' . $product->pet_type . '-' . $product->prod_name . ']';
//                }

                if (is_array($prod_ids) && count($prod_ids) > 0) {
                    $is_valid = true;
                    foreach($prod_ids as $prod_id) {
                        if (in_array($prod_id, $package_ids)) {
                            //go next
                        }else {
                            $is_valid = false;
                            break;
                        }
                    }

                    if (!$is_valid) {
                        return 'The Code is not available with your package[R502].';
                    }
                } else {
                    return 'Not valid Packages in your Code[R503]';
                }
            }


            // check first only
            if ( !empty($code->first_only) && ($code->first_only == 'Y')) {
                $app = AppointmentList::query();

                if( !empty($appointment_id) && $appointment_id >0) {
                    $app = $app->where('user_id', $user_id)->whereNotIn('status', ['C','L'] )
                        ->where('appointment_id', '!=', $appointment_id )
                        ->first();
                }else {
                    $app = $app->where('user_id', $user_id)->whereNotIn('status', ['C','L'] )
                        ->first();
                }


                //$app = $app->where('promo_code', strtoupper($code->code))


                if (!empty($app)) {
                    $msg = 'The code is for the first time customers only[R600].';
                    return $msg;
                }

                $user = User::where('user_id', $user_id)->where('status', 'A')->first();
                $adds = Address::where('user_id', $user_id)->where('status', 'A')->get();

                try {
                    foreach ($adds as $add) {
                        $str_add = $add->address1 . $add->address2;
                        $same_address = Address::join('user', 'user.user_id', '=', 'address.user_id')->where('user.status','A')->where('address.user_id', '<>', $user->user_id)->whereRaw("concat(lower(address1), lower(address2)) = '" . strtolower($str_add). "'")->first();

                        if (!empty($same_address)) {
                            $user->op_note .= '\n' . $code->code . ", Dup address of '" . $str_add . " " . $add->zip . "', " . Carbon::now();
                            $user->save();
                            return 'Your code is not valid by your Location[R601]. Please contact customer care for more information.';
                        }

                        $same_phone = User::where('user_id', '<>', $user->user_id)->where('phone', $user->phone)->where('status', 'A')->first();
                        if (!empty($same_phone)) {
                            $user->op_note .= '\n' . $code->code . ", Dup phone of '" . $user->phone . "', " . Carbon::now();
                            $user->save();
                            return 'Your code is not valid by your phone[R602]. Please contact customer care for more information.';
                        }
                    }

                } catch (\Exception $ex) {
                    Helper::log('#### EXCEPTION ####', $ex->getTraceAsString());
                }
            }


            //Check if the code has used before from the user, except Groupon w/ multimonth & Membership from the user
            if ($code->type == 'G' && $total_month > 1) {
               //Skip
            }else if ($code->type == 'S' ) {
              //Skip
            } else {
                $app = AppointmentList::query();
                $app = $app->where('user_id', $user_id);
                $app = $app->where('promo_code', strtoupper($code->code))
                    ->whereNotIn('status', ['C','L'] )
                    ->first();

                if (!empty($app)) {
                    $msg = 'You have already used this code[R700].';
                    return $msg;
                }
            }


            if ($code->type == 'R') { //Referal Code
                if ( !empty($code->user_id) && ($code->user_id == $user_id)) {
                    return 'You cannot use your own referral code[R800]';
                }
                //Referal code is always created w/ first_only = 'Y', so don't have to check if other referal_codes have used or not.

                ### check if the user have used any referral code before with signup
                //S: Signup Credit with Referral code, N: Normal , R: Referral Credit ( to the owner of referral code ), T: Store Credit, G : $50 gold package credit
                $cnt = Credit::join('promo_code', DB::raw('promo_code.code'), '=', DB::raw('credit.referral_code'))
                    ->where('credit.user_id', $user_id)
                    ->where('credit.type', 'C')
                    ->where('category', 'S')
                    ->where('credit.status', 'A')
                    ->where('promo_code.type', 'R')
                    ->count();

                if ($cnt > 0) {
                    return 'You have already used referral code before[R801].';
                }

            } else if (in_array($code->type, ['A', 'B'])) {
                ### check if Affiliate and first appointment ###
                //Affiliate code will be generated with first_only = 'Y'.
//                if (!empty($appointment_id)) {
//                    $app = AppointmentList::find($appointment_id);
//
//                    $is_first = AppointmentProcessor::is_first_appointment($app);
//                    if (!$is_first) {
//                        return 'Your code is for the first appointment only[R810].';
//                    }
//                } else {
//                    $first_app = AppointmentList::where('user_id', $user_id)->whereNotIn('status', ['C', 'L'])->first();
//                    if (!empty($first_app)) {
//                        return 'Your code is for the first appointment only[R811].';
//                    }
//                }
            } else if ($code->type == 'G' ) { ### mutli-month 2nd & 3rd time should not check first time use. ###
                if( ($total_month < 2) || ( ($total_month >= 2) && ($used_cnt == 0)) ){
                    ### check if first appointment when above cases. ###
                    $cnt = AppointmentList::where('user_id', $user_id)
                        ->whereNotIn('status', ['C', 'L'])
                        ->where('appointment_id', '!=', $appointment_id)
                        ->count();
                    if ($cnt > 0) {
                        return 'Groupon code is valid for the first time customers only[R820].Please return back to Groupon for credit. Thank you.';
                    }
                }
                if ( $total_month > 1) {
                    ### 2nd or 3rd user check for the same user only. ####
                    if ( ($used_cnt != 0) && ($user_id != self::getUserId($code->code)) ) {
                        return 'This Grouppon code has already been used by someone else[R821].';
                    }
                    if ($month_left < 1) {
                        return 'This Grouppon code has already been used for full months[R822]';
                    }
                }

                ### check if the same address exist in another address ###
                $ret = DB::select("
                    select count(*) as cnt 
                    from address a 
                        inner join address b on concat(lower(trim(substring_index(a.address1, ' ', 1))), '-', lower(trim(a.address2)), '-', a.zip) = concat(lower(trim(substring_index(b.address1, ' ', 1))), '-', lower(trim(b.address2)), '-', b.zip) 
                            and a.user_id != b.user_id 
                            and a.status = 'A'
                            and b.status = 'A'
                        inner join user c on b.user_id = c.user_id
                         and c.status ='A'
                    where a.user_id = :user_id
                ", [
                    'user_id' => $user_id
                ]);
                if (count($ret) > 0 && $ret[0]->cnt > 0) {
                    return 'Groupon code is not valid for multiple locations[R824]. Please contact our customer care.';
                }
            } else if ($code->type == 'K' ) { //Voucher/Gift-card
                //Allow redemption for Buyer or Recepient only
                $user  = User::find($user_id);
                $sales = GiftcardSales::where('promo_code', $code->code)->first();

                if (empty($sales)) {
                    return 'Cannot find the code[R830].';
                }

                if ($sales->is_gift == 'Y') {
                    $buyer  = User::find($sales->created_by); //Find buyer
                    if (!in_array(strtolower($user->email), [strtolower($buyer->email), strtolower($sales->recipient_email)])) {
                        return 'The Code is not available to the user[R831].';
                    }
                } else {
                    if ($user->user_id != $sales->created_by) {
                        return 'The Membership Code is not available[R932]]';
                    }
                }

            } else if ($code->type == 'S' ) { //Membership
                //Allow redemption for Buyer or Recepient only

                $err_msg = self::checkSubscription( $user_id,  $code );
                if(!empty($err_msg) && $err_msg != '' ) {
                    return $err_msg;
                }
            }

            return '';

        } catch (\Exception $ex) {
            Helper::log('#### EXCEPTION ####', $ex->getTraceAsString());

            return $ex->getMessage() . ' [' . $ex->getCode() . ']';
        }
    }

    public static function checkSubscription($user_id, $obj_promo_code, $new_pets=null )
    {
        $user  = User::find($user_id);
        $sales = GiftcardSales::where('promo_code', $obj_promo_code->code )->first();

        if (empty($sales)) {
            return 'Cannot find the code[R840].';
        }

        if ($sales->is_gift == 'Y') {
            $buyer  = User::find($sales->created_by); //Find buyer
            if (!in_array(strtolower($user->email), [strtolower($buyer->email), strtolower($sales->recipient_email)])) {
                return 'The Code is not available to the user[R841].';
            }
        } else {
            if ($user->user_id != $sales->created_by) {
                return 'The Membership is not available[R842]]';
            }
        }

        if( !empty($obj_promo_code->valid_user_ids) &&
            ($obj_promo_code->valid_user_ids != $user_id) ) {
            return 'The Code had already been assigned another customer[R843].Please contact our customer care.';
        }

        //Check the package by Membership IDs.

        $exp_days = 365 ;

        $data = DB::select("
                    select b.prod_id, e.size, count(*) cnt
                    from appointment_list a, appointment_product b, product c, promo_code d, pet e
                    where a.cdate >= d.expire_date - interval :exp_days day 
                    AND a.user_id = :user_id 
                    AND a.promo_code = :promo_code
                    AND a.status not in ('C','L')
                    and a.appointment_id = b.appointment_id  
                    and b.prod_id = c.prod_id
                    and c.prod_type = 'P'
                    and a.promo_code = d.code
                    and b.pet_id =e.pet_id
                    group by 1 ,2   
                    order by 1,2       
                ", [
            'exp_days' => $exp_days,
            'user_id' => $user_id,
            'promo_code' =>  $obj_promo_code->code
        ]);

        $dog_gold_s_cnt = 0;
        $dog_gold_m_cnt = 0;
        $dog_gold_l_cnt = 0;
        $dog_gold_xl_cnt = 0;
        $dog_silver_s_cnt = 0;
        $dog_silver_m_cnt = 0;
        $dog_silver_l_cnt = 0;
        $dog_silver_xl_cnt = 0;

        $cat_gold_cnt = 0;
        $cat_silver_cnt = 0;

        if (count($data) > 0) {
            foreach ($data as $o) {
                if( $o->prod_id == 1) {
                    if( $o->size == 2) {
                        $dog_gold_s_cnt += $o->cnt;
                    }else if( $o->size == 3) {
                        $dog_gold_m_cnt += $o->cnt;
                    }else if( $o->size == 4) {
                        $dog_gold_l_cnt += $o->cnt;
                    }else if( $o->size == 5) {
                        $dog_gold_xl_cnt += $o->cnt;
                    }
                }else if( $o->prod_id == 2) {
                    if( $o->size == 2) {
                        $dog_silver_s_cnt += $o->cnt;
                    }else if( $o->size == 3) {
                        $dog_silver_m_cnt += $o->cnt;
                    }else if( $o->size == 4) {
                        $dog_silver_l_cnt += $o->cnt;
                    }else if( $o->size == 5) {
                        $dog_silver_xl_cnt += $o->cnt;
                    }
                }else if( $o->prod_id == 16) {  //Cat Gold
                    $cat_gold_cnt += $o->cnt;
                }else if( $o->prod_id == 27) {  //Cat Silver
                    $cat_silver_cnt += $o->cnt;
                }
            }
        }

        if( !empty($new_pets) && is_array($new_pets)) {
            foreach ($new_pets as $pet) {
                $size = $pet->size;
                $pkg_id = $pet->info->package->prod_id;

                if( $pkg_id == 1) {
                    if( $size == 2) {
                        $dog_gold_s_cnt += 1;
                    }else if( $size == 3) {
                        $dog_gold_m_cnt += 1;
                    }else if( $size == 4) {
                        $dog_gold_l_cnt += 1;
                    }else if( $size == 5) {
                        $dog_gold_xl_cnt += 1;
                    }
                }else if( $pkg_id == 2) {
                    if( $size == 2) {
                        $dog_silver_s_cnt += 1;
                    }else if( $size == 3) {
                        $dog_silver_m_cnt += 1;
                    }else if( $size == 4) {
                        $dog_silver_l_cnt += 1;
                    }else if( $size == 5) {
                        $dog_silver_xl_cnt += 1;
                    }
                }else if( $pkg_id == 16) {  //Cat Gold
                    $cat_gold_cnt += 1;
                }else if( $pkg_id == 27) {  //Cat Silver
                    $cat_silver_cnt += 1;
                }
            }
        }

        if( $sales->giftcard_id == 25) {
            if( $dog_gold_s_cnt > 5) {
                return 'No more Gold Package is allowed[R844].';
            }
            if( (                       $dog_gold_m_cnt + $dog_gold_l_cnt + $dog_gold_xl_cnt +
                  $dog_silver_s_cnt + $dog_silver_m_cnt + $dog_silver_l_cnt + $dog_silver_xl_cnt)  > 0) {
                return 'Not allowed package/size[R844].';
            }
        }else if( $sales->giftcard_id == 26) {
            if( $dog_gold_m_cnt > 5) {
                return 'No more Gold Package is allowed.[R845]';
            }
            if( (   $dog_gold_s_cnt                       + $dog_gold_l_cnt + $dog_gold_xl_cnt +
                    $dog_silver_s_cnt + $dog_silver_m_cnt + $dog_silver_l_cnt + $dog_silver_xl_cnt)  > 0) {
                return 'Not allowed package/size[R845].';
            }
        }else if($sales->giftcard_id == 27) {
            if( $dog_gold_l_cnt > 5) {
                return 'No more Gold Package is allowed.[R846]';
            }
            if( (   $dog_gold_s_cnt   + $dog_gold_m_cnt                       + $dog_gold_xl_cnt +
                    $dog_silver_s_cnt + $dog_silver_m_cnt + $dog_silver_l_cnt + $dog_silver_xl_cnt)  > 0) {
                return 'Not allowed package/size[R846].';
            }
        }else if($sales->giftcard_id == 28) {
            if( ($dog_gold_s_cnt + $dog_gold_m_cnt + $dog_gold_l_cnt ) > 2) {
                return 'No more Gold Package is allowed.[R847]';
            }
            if( ($dog_silver_s_cnt + $dog_silver_m_cnt + $dog_silver_l_cnt ) > 1) {
                return 'No more Silver Package is allowed.[R848]';
            }
            if( (   $dog_gold_xl_cnt + $dog_silver_xl_cnt)  > 0) {
                return 'Not allowed package/size[R848].';
            }
        }else if($sales->giftcard_id == 29) {
            if( $cat_gold_cnt > 4) {
                return 'No more Gold Package is allowed.[R849]';
            }
            if(  $cat_silver_cnt  > 0) {
                return 'Not allowed package[R849].';
            }
        }else if( $sales->giftcard_id == 30) {
            if( $cat_gold_cnt > 2) {
                return 'No more Gold Package is allowed.[R850]';
            }
            if( $cat_silver_cnt > 1) {
                return 'No more Silver Package is allowed.[R851]';
            }
        }
    }
}